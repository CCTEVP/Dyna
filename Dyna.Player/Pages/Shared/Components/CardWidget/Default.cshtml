@model CardWidgetClass
@using Dyna.Player.Models
@using Dyna.Player.Utilities
@using Dyna.Player.TagHelpers
@using Newtonsoft.Json
@using Dyna.Shared.Classes.Components.Layouts
@using Dyna.Shared.Classes.Components.Widgets


@{
    var value = Model?.Value ?? "00";
    var animation = Model?.Animation?.ToLower() ?? "";
    var styles = ConversionUtilities.GenerateCssStyleString(Model?.Styles);
}

<div id="card-widget-@(Model.Identifier ?? Guid.NewGuid().ToString("N"))"
     class="@(Model.Classes ?? "")"
     style="@styles"
     data-animation="@animation"
     data-value="@value"
     data-current-value="@value">
    @if (Model != null)
    {
        @if (!string.IsNullOrEmpty(animation))
        {
            if (animation == "roll")
            {
                <div style="width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; font-size: inherit; line-height: 1; color: inherit;">
                    @value
                </div>
            }
            else if (animation == "flip")
            {
                <div style="position: relative; width: 100%; height: 100%; perspective: 300px; display: flex; justify-content: center; align-items: center;">
                    <div style="position: relative; width: 100%; height: 100%;">
                        <!-- Static bottom half (showing bottom half of current value) -->
                        <div style="position: absolute; width: 100%; height: 50%; bottom: 0; overflow: hidden;" data-role="static-bottom">
                            <div style="position: absolute; width: 100%; height: 200%; top: -50%; display: flex; justify-content: center; align-items: center; font-size: inherit; line-height: 1; color: inherit;">@value</div>
                        </div>

                        <!-- Static top half (showing top half of next value, initially hidden) -->
                        <div style="position: absolute; width: 100%; height: 50%; top: 0; overflow: hidden; z-index: 2; opacity: 0;" data-role="static-top">
                            <div style="position: absolute; width: 100%; height: 200%; top: 0; display: flex; justify-content: center; align-items: center; font-size: inherit; line-height: 1; color: inherit;" data-role="top-digit"></div>
                        </div>

                        <!-- Flipping card -->
                        <div style="position: absolute; width: 100%; height: 50%; top: 0; transform-origin: bottom center; transform: rotateX(0deg); z-index: 1;" data-role="flip-card">
                            <!-- Front of flip card (showing top half of current value) -->
                            <div style="position: absolute; width: 100%; height: 100%; backface-visibility: hidden; overflow: hidden;" data-role="flip-front">
                                <div style="position: absolute; width: 100%; height: 200%; top: 0; display: flex; justify-content: center; align-items: center; font-size: inherit; line-height: 1; color: inherit;">@value</div>
                            </div>

                            <!-- Back of flip card (showing bottom half of next value, upside down) -->
                            <div style="position: absolute; width: 100%; height: 100%; backface-visibility: hidden; overflow: hidden; transform: rotateX(180deg);" data-role="flip-back">
                                <div style="position: absolute; width: 100%; height: 200%; top: 50%; display: flex; justify-content: center; align-items: center; font-size: inherit; line-height: 1; color: inherit;" data-role="back-digit" data-debug="back-digit"></div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div style="width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; font-size: inherit; line-height: 1; color: inherit;">
                    @value
                </div>
            }
        }
        else
        {
            <div style="width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; font-size: inherit; line-height: 1; color: inherit;">
                @value
            </div>
        }
    }
    else
    {
        <p>Model is null</p>
    }
</div>

@{
    // Register the CardWidget asset
    AssetTagHelper.AddPresentAsset("CardWidget", "widget");

    if (!string.IsNullOrEmpty(Model?.Animation))
    {
        // Register the animation libraries in the correct order
        // First register the common animation system with highest priority
        AssetTagHelper.AddPresentAsset("Libraries/WidgetAnimations/CardWidgetAnimation", "library", 100);

        // Then register specific animation handlers based on the animation type
        var animationType = Model.Animation.ToLower();

        if (animationType == "roll")
        {
            // Register the roll animation file with lower priority
            AssetTagHelper.AddPresentAsset("Libraries/WidgetAnimations/CardWidgetAnimationRoll", "library", 101);
        }
        else if (animationType == "flip")
        {
            // Register the flip animation file with lower priority
            AssetTagHelper.AddPresentAsset("Libraries/WidgetAnimations/CardWidgetAnimationFlip", "library", 101);
        }
    }
}